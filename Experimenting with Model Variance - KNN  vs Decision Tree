{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "E22001 AML Experiment 1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMZF61CwyeP5W1gZ04tg5/E",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aanchalkhanna72/aanchalkhanna72/blob/main/Experimenting%20with%20Model%20Variance%20-%20KNN%20%20vs%20Decision%20Tree\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**E22001 Aanchal Khanna**"
      ],
      "metadata": {
        "id": "GVq17nd-tcR8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Experiment 1: Objective - Observing and Comparing Variance of KNN Model and Decision Tree model using Ensemble Learning**"
      ],
      "metadata": {
        "id": "UxnECXJdc_v3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hypothesis: Decision Tree will have higher variance as it is a greedy model and it overfits our data.**"
      ],
      "metadata": {
        "id": "tNxy2Gak4g30"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Let's check if that is reflected in our experiment..**"
      ],
      "metadata": {
        "id": "agYJLPZb42q5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing libraries\n",
        "import pandas as pd\n",
        "from random import sample\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor"
      ],
      "metadata": {
        "id": "4dTUIAzWudpG"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#importing dataset through local runtime\n",
        "cars=pd.read_csv(\"/Users/aanchalkhanna72/Desktop/Praxis/Term 1/IML/cars.csv\")\n",
        "cars.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "UxFOLMV-uTwe",
        "outputId": "c286da39-c8c6-431b-e745-3c47f9bc9e1a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         Car   MPG  Cylinders  Displacement  Horsepower  \\\n",
              "0  Chevrolet Chevelle Malibu  18.0          8         307.0         130   \n",
              "1          Buick Skylark 320  15.0          8         350.0         165   \n",
              "2         Plymouth Satellite  18.0          8         318.0         150   \n",
              "3              AMC Rebel SST  16.0          8         304.0         150   \n",
              "4                Ford Torino  17.0          8         302.0         140   \n",
              "\n",
              "   Weight  Acceleration  Model Origin  \\\n",
              "0    3504          12.0     70     US   \n",
              "1    3693          11.5     70     US   \n",
              "2    3436          11.0     70     US   \n",
              "3    3433          12.0     70     US   \n",
              "4    3449          10.5     70     US   \n",
              "\n",
              "                                          Unnamed: 9 Unnamed: 10 Unnamed: 11  \\\n",
              "0                                                NaN         NaN         NaN   \n",
              "1                                                NaN         NaN         NaN   \n",
              "2                                          For every    entity,    there are   \n",
              "3  each variable represents a characteristic of  ...         NaN         NaN   \n",
              "4                                  entity - 406 cars         NaN         NaN   \n",
              "\n",
              "                         Unnamed: 12  \n",
              "0                                NaN  \n",
              "1                                NaN  \n",
              "2  7 values so this is 1 observation  \n",
              "3                                NaN  \n",
              "4                                NaN  "
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Car</th>\n",
              "      <th>MPG</th>\n",
              "      <th>Cylinders</th>\n",
              "      <th>Displacement</th>\n",
              "      <th>Horsepower</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Acceleration</th>\n",
              "      <th>Model</th>\n",
              "      <th>Origin</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "      <th>Unnamed: 10</th>\n",
              "      <th>Unnamed: 11</th>\n",
              "      <th>Unnamed: 12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Chevrolet Chevelle Malibu</td>\n",
              "      <td>18.0</td>\n",
              "      <td>8</td>\n",
              "      <td>307.0</td>\n",
              "      <td>130</td>\n",
              "      <td>3504</td>\n",
              "      <td>12.0</td>\n",
              "      <td>70</td>\n",
              "      <td>US</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Buick Skylark 320</td>\n",
              "      <td>15.0</td>\n",
              "      <td>8</td>\n",
              "      <td>350.0</td>\n",
              "      <td>165</td>\n",
              "      <td>3693</td>\n",
              "      <td>11.5</td>\n",
              "      <td>70</td>\n",
              "      <td>US</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Plymouth Satellite</td>\n",
              "      <td>18.0</td>\n",
              "      <td>8</td>\n",
              "      <td>318.0</td>\n",
              "      <td>150</td>\n",
              "      <td>3436</td>\n",
              "      <td>11.0</td>\n",
              "      <td>70</td>\n",
              "      <td>US</td>\n",
              "      <td>For every</td>\n",
              "      <td>entity,</td>\n",
              "      <td>there are</td>\n",
              "      <td>7 values so this is 1 observation</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AMC Rebel SST</td>\n",
              "      <td>16.0</td>\n",
              "      <td>8</td>\n",
              "      <td>304.0</td>\n",
              "      <td>150</td>\n",
              "      <td>3433</td>\n",
              "      <td>12.0</td>\n",
              "      <td>70</td>\n",
              "      <td>US</td>\n",
              "      <td>each variable represents a characteristic of  ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ford Torino</td>\n",
              "      <td>17.0</td>\n",
              "      <td>8</td>\n",
              "      <td>302.0</td>\n",
              "      <td>140</td>\n",
              "      <td>3449</td>\n",
              "      <td>10.5</td>\n",
              "      <td>70</td>\n",
              "      <td>US</td>\n",
              "      <td>entity - 406 cars</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#selecting columns for analysis\n",
        "data=cars[[\"Horsepower\",\"Cylinders\",\"Weight\",\"Displacement\",\"MPG\"]]\n"
      ],
      "metadata": {
        "id": "TDBMhqpVucdI"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#checking data head,length\n",
        "data.head(),len(data)"
      ],
      "metadata": {
        "id": "ukkNRJR_uxOm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0256d93-702b-404d-e8a7-ba25d0f6dd12"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(   Horsepower  Cylinders  Weight  Displacement   MPG\n",
              " 0         130          8    3504         307.0  18.0\n",
              " 1         165          8    3693         350.0  15.0\n",
              " 2         150          8    3436         318.0  18.0\n",
              " 3         150          8    3433         304.0  16.0\n",
              " 4         140          8    3449         302.0  17.0,\n",
              " 406)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Step 1: Test-Train Split**"
      ],
      "metadata": {
        "id": "NRKTG-FMdjrz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#segregating test observation from training data\n",
        "test=data.sample(n=1,random_state=1)\n",
        "X_test=test[[\"Horsepower\",\"Cylinders\",\"Weight\",\"Displacement\"]]\n",
        "y_test=test[[\"MPG\"]]"
      ],
      "metadata": {
        "id": "U7HiJks9DiLt"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#creating training set for random sampling and model fitting\n",
        "train=data[[\"Horsepower\",\"Cylinders\",\"Weight\",\"Displacement\",\"MPG\"]]\n",
        "#dropping test observation from  train  data\n",
        "train.drop(test.index,inplace=True)\n",
        "#segregating training data into 'predictors' and 'target' variables\n",
        "#X_train=train[[\"Horsepower\",\"Cylinders\",\"Weight\",\"Displacement\"]]\n",
        "#y_train=train[[\"MPG\"]]\n",
        "len(X_test),len(y_test),len(train)#len(X_train),len(y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mcPFIgE6T0hi",
        "outputId": "a06caa24-d52c-4274-aba1-a6fc239184b1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 1, 405)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Step 2: Drawing 200 Random Samples, Fitting KNN models on respective samples**"
      ],
      "metadata": {
        "id": "RXYbwGRRc5_a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Steps for creating code for :\n",
        "#drawing 200 random samples\n",
        "#fitting KNN model on each sample\n",
        "#predicting the MPG of test observation\n",
        "#calcualting variance of the model\n",
        "#repeating the same process for Decision Tree model\n",
        "\n",
        "y_predictions=[]\n",
        "for i in range (1,201):\n",
        "  #generate 200 random samples  of 80 observations each\n",
        "  smpl=train.sample(n=80)\n",
        "  #split training data into predictors and target\n",
        "  X_train_smpl=smpl[[\"Cylinders\",\"Horsepower\",\"Weight\",\"Displacement\"]]\n",
        "  y_train_smpl=smpl[[\"MPG\"]]\n",
        "  #fitting KNN model on each sample\n",
        "        #Step 1: instantiate learning model\n",
        "  knn=KNeighborsRegressor(metric='euclidean') #5-NN default using euclidean distance  \n",
        "        #Step 2: fitting the model\n",
        "  knn.fit(X_train_smpl,y_train_smpl)\n",
        "  #predicting the MPG of test observation\n",
        "  y_pred=knn.predict(X_test)\n",
        "  y_predictions.append(y_pred)\n",
        "print(y_predictions)"
      ],
      "metadata": {
        "id": "kSzYdk9MY5y4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "087eb83b-0b8c-4a0c-c240-d0bc76cc6613"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[array([[31.28]]), array([[29.94]]), array([[27.48]]), array([[28.66]]), array([[28.28]]), array([[27.]]), array([[28.84]]), array([[28.2]]), array([[28.74]]), array([[27.88]]), array([[23.8]]), array([[30.14]]), array([[28.04]]), array([[28.74]]), array([[28.26]]), array([[28.16]]), array([[29.7]]), array([[29.44]]), array([[31.54]]), array([[32.56]]), array([[29.22]]), array([[26.5]]), array([[27.8]]), array([[31.24]]), array([[33.56]]), array([[26.2]]), array([[28.44]]), array([[25.1]]), array([[31.6]]), array([[32.26]]), array([[25.]]), array([[28.82]]), array([[28.9]]), array([[30.74]]), array([[34.66]]), array([[27.64]]), array([[30.]]), array([[32.]]), array([[29.32]]), array([[31.78]]), array([[29.98]]), array([[30.74]]), array([[28.1]]), array([[29.]]), array([[34.72]]), array([[31.64]]), array([[32.36]]), array([[34.08]]), array([[30.46]]), array([[33.04]]), array([[27.9]]), array([[27.84]]), array([[29.56]]), array([[29.06]]), array([[29.3]]), array([[26.6]]), array([[29.48]]), array([[31.98]]), array([[32.84]]), array([[28.74]]), array([[26.8]]), array([[29.74]]), array([[28.84]]), array([[31.48]]), array([[31.74]]), array([[31.36]]), array([[28.3]]), array([[34.38]]), array([[32.64]]), array([[31.]]), array([[34.48]]), array([[26.4]]), array([[28.46]]), array([[29.32]]), array([[26.08]]), array([[28.94]]), array([[32.9]]), array([[30.04]]), array([[27.14]]), array([[25.18]]), array([[27.9]]), array([[27.64]]), array([[29.06]]), array([[28.86]]), array([[30.84]]), array([[27.2]]), array([[31.54]]), array([[34.48]]), array([[30.46]]), array([[25.6]]), array([[27.2]]), array([[28.]]), array([[32.38]]), array([[29.58]]), array([[28.94]]), array([[31.6]]), array([[26.4]]), array([[30.42]]), array([[27.96]]), array([[31.98]]), array([[30.3]]), array([[30.02]]), array([[30.88]]), array([[26.78]]), array([[32.]]), array([[27.54]]), array([[29.]]), array([[27.3]]), array([[30.24]]), array([[27.46]]), array([[26.64]]), array([[28.64]]), array([[30.44]]), array([[25.8]]), array([[26.6]]), array([[32.64]]), array([[29.36]]), array([[29.74]]), array([[28.98]]), array([[28.16]]), array([[30.32]]), array([[29.22]]), array([[30.88]]), array([[27.6]]), array([[29.08]]), array([[27.24]]), array([[25.98]]), array([[27.84]]), array([[27.76]]), array([[30.14]]), array([[30.46]]), array([[29.84]]), array([[26.7]]), array([[32.1]]), array([[30.66]]), array([[30.88]]), array([[25.48]]), array([[33.06]]), array([[29.9]]), array([[28.72]]), array([[29.54]]), array([[31.48]]), array([[28.]]), array([[31.32]]), array([[31.1]]), array([[26.]]), array([[29.46]]), array([[25.68]]), array([[29.78]]), array([[31.12]]), array([[28.54]]), array([[30.26]]), array([[30.72]]), array([[27.84]]), array([[28.68]]), array([[31.]]), array([[28.44]]), array([[26.4]]), array([[29.44]]), array([[31.68]]), array([[27.24]]), array([[30.1]]), array([[33.]]), array([[30.76]]), array([[30.3]]), array([[30.6]]), array([[29.64]]), array([[29.14]]), array([[29.96]]), array([[25.2]]), array([[27.66]]), array([[28.76]]), array([[29.8]]), array([[32.74]]), array([[30.58]]), array([[27.62]]), array([[29.84]]), array([[28.1]]), array([[27.]]), array([[33.36]]), array([[31.94]]), array([[30.06]]), array([[28.84]]), array([[27.14]]), array([[31.2]]), array([[28.94]]), array([[31.12]]), array([[26.6]]), array([[29.16]]), array([[32.18]]), array([[30.64]]), array([[30.96]]), array([[28.92]]), array([[30.2]]), array([[29.26]]), array([[29.8]]), array([[30.92]]), array([[27.34]]), array([[30.]]), array([[28.6]])]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#calcualting variance of the KNN model\n",
        "variance=(np.sum(np.asarray(y_predictions)**2)/200-1)-(np.mean(y_predictions)**2)\n",
        "variance"
      ],
      "metadata": {
        "id": "Zz8Rx0ZYrxJN",
        "outputId": "304d0778-d22b-4b65-8831-75d85b39de04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.5464247899998327"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Step 3: Drawing 200 Random Samples, Fitting Decision Tree (DT) models on respective samples**"
      ],
      "metadata": {
        "id": "pKJ6TyRz2e7i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_predictions_dt=[]\n",
        "for i in range (1,201):\n",
        "  #generate 200 random samples  of 80 observations each\n",
        "  smpl=train.sample(n=80)\n",
        "  #split training data into predictors and target\n",
        "  X_train_smpl=smpl[[\"Cylinders\",\"Horsepower\",\"Weight\",\"Displacement\"]]\n",
        "  y_train_smpl=smpl[[\"MPG\"]]\n",
        "  #fitting DT model on each sample\n",
        "        #Step 1: instantiate learning model\n",
        "  reg_tree=DecisionTreeRegressor() #default min_samples_leaf=5,max_depth=none\n",
        "  reg_tree.fit(X_train_smpl,y_train_smpl)\n",
        "  #predicting the MPG of test observation\n",
        "  y_pred=reg_tree.predict(X_test)\n",
        "  y_predictions_dt.append(y_pred)\n",
        "print(y_predictions_dt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ktPt_fSCqPdR",
        "outputId": "84aa45d1-be46-455d-eda1-8eb3d2fbe5c8"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[array([34.5]), array([23.6]), array([25.]), array([25.]), array([33.8]), array([26.]), array([23.6]), array([26.]), array([30.]), array([25.]), array([21.]), array([23.]), array([30.]), array([25.]), array([34.5]), array([33.]), array([13.]), array([0.]), array([34.5]), array([28.]), array([21.]), array([43.1]), array([37.7]), array([25.]), array([0.]), array([21.]), array([20.]), array([21.]), array([44.3]), array([0.]), array([25.]), array([34.7]), array([34.5]), array([33.]), array([26.]), array([36.4]), array([24.5]), array([25.]), array([38.]), array([34.7]), array([26.]), array([24.]), array([34.5]), array([23.]), array([36.]), array([34.5]), array([34.]), array([34.7]), array([43.4]), array([0.]), array([18.]), array([36.]), array([23.]), array([22.]), array([25.]), array([26.]), array([26.]), array([25.]), array([20.2]), array([30.9]), array([34.]), array([23.]), array([24.5]), array([26.]), array([32.2]), array([25.]), array([34.5]), array([38.]), array([24.5]), array([34.7]), array([43.4]), array([34.5]), array([34.2]), array([21.]), array([25.]), array([36.]), array([34.]), array([34.5]), array([34.5]), array([25.]), array([44.]), array([34.5]), array([32.2]), array([26.]), array([34.7]), array([44.3]), array([32.4]), array([21.]), array([33.]), array([21.]), array([46.6]), array([23.]), array([36.1]), array([26.]), array([34.7]), array([0.]), array([34.5]), array([27.]), array([30.9]), array([21.]), array([26.]), array([26.]), array([34.5]), array([0.]), array([0.]), array([25.]), array([34.]), array([34.7]), array([23.]), array([40.9]), array([44.]), array([34.]), array([32.2]), array([0.]), array([25.]), array([44.]), array([44.3]), array([32.2]), array([25.]), array([43.4]), array([26.]), array([34.5]), array([36.]), array([0.]), array([32.2]), array([26.]), array([22.]), array([36.4]), array([0.]), array([25.4]), array([34.5]), array([38.]), array([34.]), array([22.]), array([32.4]), array([44.]), array([22.]), array([34.7]), array([20.]), array([19.]), array([32.4]), array([34.5]), array([23.6]), array([38.]), array([30.5]), array([46.6]), array([29.9]), array([34.7]), array([38.1]), array([43.1]), array([34.2]), array([40.9]), array([29.]), array([29.9]), array([23.5]), array([34.7]), array([23.]), array([24.5]), array([0.]), array([44.3]), array([44.]), array([26.]), array([25.]), array([44.]), array([21.]), array([34.5]), array([34.]), array([44.3]), array([0.]), array([29.]), array([28.8]), array([21.]), array([25.]), array([44.3]), array([32.1]), array([34.5]), array([29.5]), array([34.]), array([26.]), array([25.]), array([15.]), array([34.5]), array([43.4]), array([0.]), array([23.]), array([21.]), array([44.3]), array([34.7]), array([25.]), array([21.]), array([38.]), array([0.]), array([30.5]), array([21.]), array([21.]), array([20.3]), array([24.5]), array([15.]), array([0.]), array([43.4])]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#calcualting variance of the DT model\n",
        "variance=(np.sum(np.asarray(y_predictions_dt)**2)/200-1)-(np.mean(y_predictions_dt)**2)\n",
        "variance"
      ],
      "metadata": {
        "id": "4Y-XmmFKgSYE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bb17950-cebe-44f3-cce5-8f7d1b14b01d"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "115.85447775000023"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Result: Our hypothesis is proved correct. We see that the variance  of   the DT model is higher than that of KNN model. Since the DT model is allowed to grow to its maximum size in our current model, model complexity is high and variance is high. Compared to KNN, DT model generalizes the training data very well and so, when it is presented with an unknown observation, it will produce more variance in the predicted values of the test observation.**"
      ],
      "metadata": {
        "id": "fo0a73j54ZS_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "P5hgnq-Txo1J"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}